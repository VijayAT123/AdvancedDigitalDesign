
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top (

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);

	hexdriver hex0(.val(SW[3:0]), .HEX(HEX0[6:0])); //first 4 switches passed into hexdriver hex0; executes if assign
	hexdriver hex1(.val(SW[7:4]), .HEX(HEX1[6:0])); //switches 4-7 controlling hex1
	hexdriver hex2(.val(SW[11:8]), .HEX(HEX2[6:0])); //switches 8-11 controlling hex2
	hexdriver hex3(.val(SW[15:12]), .HEX(HEX3[6:0])); //switches 12-15 controlling hex3
	 //last 2 switches controlling hex4
	//switches 16 and 17 exception
	always @ (*) begin
		if (SW[17:16] == 2'b11) begin //if switches 16 and 17 both turned on
			assign HEX4 = 7'b1111001; //dipslay a 1 on HEX4
		end else if (SW[17:16] == 2'b0) begin//if switches 16 and 17 both turned off
			assign HEX4 = 7'b1000000; //display a 0 on HEX4
		end else begin 
			assign HEX4 = 7'b1111111; //turn off all segments on HEX4 if not all switches on/off
		end
	end
	
	assign HEX5 = 7'b1000000; //diplay a 0
	assign HEX6 = 7'b1000000; //diplay a 0
	assign HEX7 = 7'b1000000; //diplay a 0
	
	
//=======================================================
//  REG/WIRE declarations
//=======================================================

	/* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
	logic [23:0] clkdiv;
	logic ledclk;
	assign ledclk = clkdiv[23];

	/* driver for LEDs */
	logic [25:0] leds;
	assign LEDR = leds[25:8];
	assign LEDG = leds[7:0];

	/* LED state register, 0 means going left, 1 means going right */
	logic ledstate;


//=======================================================
//  Structural coding
//=======================================================


	initial begin
		clkdiv = 26'h0;
		/* start at the far right, LEDG0 */
		leds = 26'b1;
		/* start out going to the left */
		ledstate = 1'b0;
	end

	always @(posedge CLOCK_50) begin
		/* drive the clock divider, every 2^26 cycles of CLOCK_50, the
		* top bit will roll over and give us a clock edge for clkdiv
		* */
		clkdiv <= clkdiv + 1;
	end

	always @(posedge ledclk) begin
		/* going left and we are at the far left, time to turn around */
		if ( (ledstate == 0) && (leds == 26'b10000000000000000000000000) ) begin
			ledstate <= 1;
			leds <= leds >> 1;

		/* going left and not at the far left, keep going */
		end else if (ledstate == 0) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right and we are at the far right, turn around */
		end else if ( (ledstate == 1) && (leds == 26'b1) ) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right, and we aren't at the far right */
		end else begin
			leds <= leds >> 1;
		end
	end

endmodule
